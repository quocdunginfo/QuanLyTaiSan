<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="barBtnPhanCong.LargeGlyph" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>